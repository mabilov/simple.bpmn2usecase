
partial class UseCaseImpl {

@members <--

	public String export() {
		StringBuffer sb = new StringBuffer();
		sb.append("use case ");
		sb.append(this.getId());
		if (this.getPrecondition() != null) {
			sb.append(" precondition ");
			sb.append(this.getPrecondition().getName());
		}
		Optional<Flow> basicFlowOptional = this.getFlows().stream().filter(f -> f instanceof BasicFlow).findAny();
		if (basicFlowOptional.isPresent()) {
			BasicFlow bFlow = (BasicFlow) basicFlowOptional.get();
			sb.append(" basic flow");
			sb.append(bFlow.export());
		}

		Iterator<NamedFlow> sortedFlows = this.getFlows().stream().filter(f -> f instanceof NamedFlow)
				.map(new Function<Flow, NamedFlow>() {
					@Override
					public NamedFlow apply(Flow t) {
						return (NamedFlow) t;
					}
				}).sorted(new NamedFlowComparator()).iterator();

		while (sortedFlows.hasNext()) {
			Flow flow = sortedFlows.next();
			if (flow instanceof BasicFlow)
				continue;
			else if (flow instanceof ParallelFlow) {
				sb.append(" parallel flow ");
				sb.append(flow.export());
			} else if (flow instanceof AlternativeFlow) {
				sb.append(" alternative flow ");
				sb.append(flow.export());
			}
		}
		return sb.toString();
	}
	
-->

}