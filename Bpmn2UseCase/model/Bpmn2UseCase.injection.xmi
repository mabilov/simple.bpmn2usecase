<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;start&quot;, start);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;start&quot;,start);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;_se2bf&quot;, _se2bf);&#xA;ruleresult.registerObject(&quot;start&quot;, start);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;_sf2f&quot;, _sf2f);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;process&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getProcess()) &amp;&amp; match.getObject(&quot;start&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getStartEvent()) &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;_se2bf&quot;, _se2bf);&#xA;ruleresult.registerObject(&quot;start&quot;, start);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;_sf2f&quot;, _sf2f);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUseCase()) &amp;&amp; match.getObject(&quot;flow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getBasicFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;sf2&quot;, sf2);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ps1&quot;,_t2ps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;_t2ps1&quot;, _t2ps1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask()) &amp;&amp; match.getObject(&quot;sf2&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ps1&quot;,_t2ps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;_t2ps1&quot;, _t2ps1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;sf2&quot;, sf2);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask()) &amp;&amp; match.getObject(&quot;sf2&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;match.registerObject(&quot;sf2&quot;, sf2);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask()) &amp;&amp; match.getObject(&quot;sf2&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_t2ns&quot;, _t2ns);&#xA;ruleresult.registerObject(&quot;sf2&quot;, sf2);&#xA;ruleresult.registerObject(&quot;_sf2f2&quot;, _sf2f2);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ns1&quot;,_t2ns1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;_t2ns1&quot;, _t2ns1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ns1&quot;,_t2ns1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;_t2ns1&quot;, _t2ns1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;_sf2f1&quot;, _sf2f1);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf.id&quot;, true, csp);&#xD;&#xA;var_sf_id.setValue(sf.getId());&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.id&quot;, csp);&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_pg2ps&quot;,_pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_p2uc&quot;,_p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;_sf2pf&quot;, _sf2pf);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.id&quot;, true, csp);&#xD;&#xA;var_flow_id.setValue(flow.getId());&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf.id&quot;, csp);&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_pg2ps&quot;,_pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_p2uc&quot;,_p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;_pg2ps&quot;, _pg2ps);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;_sf2pf&quot;, _sf2pf);&#xA;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;flow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Process2UseCase&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.P2UC _p2uc = (Bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_se2bf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_se2bf&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SE2BF _se2bf = (Bpmn2UseCase.SE2BF) matchFor_se2bf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStart = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;start&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent start = (SimpleBPMN.StartEvent) matchForStart.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f = (Bpmn2UseCase.SF2F) matchFor_sf2f.get().getNode();&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Process2UseCase&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.P2UC _p2uc = (Bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_se2bf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_se2bf&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SE2BF _se2bf = (Bpmn2UseCase.SE2BF) matchFor_se2bf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStart = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;start&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent start = (SimpleBPMN.StartEvent) matchForStart.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f = (Bpmn2UseCase.SF2F) matchFor_sf2f.get().getNode();&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task node = (SimpleBPMN.Task) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep prevStep = (SimpleUseCase.NormalStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ps1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ps1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ps1 = (Bpmn2UseCase.T2NS) matchFor_t2ps1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepSeq&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task node = (SimpleBPMN.Task) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep prevStep = (SimpleUseCase.NormalStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ps1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ps1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ps1 = (Bpmn2UseCase.T2NS) matchFor_t2ps1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepSeq&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepAfterSE&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent node = (SimpleBPMN.StartEvent) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepAfterSE&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepAfterSE&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent node = (SimpleBPMN.StartEvent) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepAfterSE&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepAfterPG&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway node = (SimpleBPMN.ParallelGateway) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(node.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepAfterPG&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2NormalStepAfterPG&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway node = (SimpleBPMN.ParallelGateway) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns = (Bpmn2UseCase.T2NS) matchFor_t2ns.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf2&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf2 = (SimpleBPMN.SequenceFlow) matchForSf2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f2 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f2&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f2 = (Bpmn2UseCase.SF2F) matchFor_sf2f2.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(node.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2NormalStepAfterPG&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task node = (SimpleBPMN.Task) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep prevStep = (SimpleUseCase.NormalStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns1 = (Bpmn2UseCase.T2NS) matchFor_t2ns1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepSeq&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task node = (SimpleBPMN.Task) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep prevStep = (SimpleUseCase.NormalStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_t2ns1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_t2ns1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.T2NS _t2ns1 = (Bpmn2UseCase.T2NS) matchFor_t2ns1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepSeq&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepAfterSE&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent node = (SimpleBPMN.StartEvent) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepAfterSE&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepAfterSE&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent node = (SimpleBPMN.StartEvent) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepAfterSE&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepAfterPG&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway node = (SimpleBPMN.ParallelGateway) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(node.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepAfterPG&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ParallelGateway2ParallelStepAfterPG&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway node = (SimpleBPMN.ParallelGateway) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2f1 = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2f1&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2f1 = (Bpmn2UseCase.SF2F) matchFor_sf2f1.get().getNode();&#xA;&#xA;if(!(node.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ParallelGateway2ParallelStepAfterPG&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SequenceFlowAfterPG2ParallelFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.P2UC _p2uc = (Bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow flow = (SimpleUseCase.ParallelFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2pf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2pf&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2pf = (Bpmn2UseCase.SF2F) matchFor_sf2pf.get().getNode();&#xA;&#xA;if(!(pgw.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf&quot;, true, csp);&#xD;&#xA;var_sf_id.setValue(sf.getId());&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow&quot;, true, csp);&#xD;&#xA;var_flow_id.setValue(flow.getId());&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SequenceFlowAfterPG2ParallelFlow&quot;);&#xD;&#xA;eq0.solve(var_sf_id,var_flow_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_flow_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;flow.setId((String) var_flow_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SequenceFlowAfterPG2ParallelFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_pg2ps = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_pg2ps&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.PG2PS _pg2ps = (Bpmn2UseCase.PG2PS) matchFor_pg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.P2UC _p2uc = (Bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow flow = (SimpleUseCase.ParallelFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_sf2pf = tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_sf2pf&quot;)).findAny();&#xD;&#xA;Bpmn2UseCase.SF2F _sf2pf = (Bpmn2UseCase.SF2F) matchFor_sf2pf.get().getNode();&#xA;&#xA;if(!(pgw.getIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf&quot;, true, csp);&#xD;&#xA;var_sf_id.setValue(sf.getId());&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow&quot;, true, csp);&#xD;&#xA;var_flow_id.setValue(flow.getId());&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SequenceFlowAfterPG2ParallelFlow&quot;);&#xD;&#xA;eq0.solve(var_sf_id,var_flow_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf.setId((String) var_sf_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;start&quot;,start);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ps1&quot;,_t2ps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf2&quot;,sf2);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ns1&quot;,_t2ns1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf.id&quot;, true, csp);&#xD;&#xA;var_sf_id.setValue(sf.getId());&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.id&quot;, true, csp);&#xD;&#xA;var_flow_id.setValue(flow.getId());&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_pg2ps&quot;,_pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_p2uc&quot;,_p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_solveCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/isApplicable_checkCsp_CC"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ps1&quot;,_t2ps1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_t2ns1&quot;,_t2ns1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_sf2f1&quot;,_sf2f1);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf.id&quot;, csp);&#xD;&#xA;var_sf_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_flow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;flow.id&quot;, csp);&#xD;&#xA;var_flow_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf_id,var_flow_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_pg2ps&quot;,_pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;_p2uc&quot;,_p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/generateModel_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow/generateModel_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2NormalStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterSE"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ParallelGateway2ParallelStepAfterPG"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/Bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SequenceFlowAfterPG2ParallelFlow"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
