<?xml version="1.0" encoding="ASCII"?>
<sdmUtil:CompilerInjection xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:sdmUtil="platform:/plugin/SDMLanguage/model/SDMLanguage.ecore#//sdmUtil">
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;start&quot;, start);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_start_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;start.id&quot;, true, csp);&#xD;&#xA;var_start_id.setValue(start.getId());&#xD;&#xA;var_start_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.id&quot;, true, csp);&#xD;&#xA;var_process_id.setValue(process.getId());&#xD;&#xA;var_process_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_cond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cond.name&quot;, csp);&#xD;&#xA;var_cond_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.id&quot;, csp);&#xD;&#xA;var_useCase_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_start_id,var_cond_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_process_id,var_useCase_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;start&quot;,start);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;s2f&quot;, s2f);&#xA;ruleresult.registerObject(&quot;start&quot;, start);&#xA;ruleresult.registerObject(&quot;cond&quot;, cond);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;process&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getProcess()) &amp;&amp; match.getObject(&quot;start&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getStartEvent());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;cond&quot;, cond);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_cond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cond.name&quot;, true, csp);&#xD;&#xA;var_cond_name.setValue(cond.getName());&#xD;&#xA;var_cond_name.setType(&quot;String&quot;);&#xD;&#xA;Variable var_useCase_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase.id&quot;, true, csp);&#xD;&#xA;var_useCase_id.setValue(useCase.getId());&#xD;&#xA;var_useCase_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_start_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;start.id&quot;, csp);&#xD;&#xA;var_start_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process.id&quot;, csp);&#xD;&#xA;var_process_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_start_id,var_cond_name);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_process_id,var_useCase_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cond&quot;,cond);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;_p2uc&quot;, _p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;s2f&quot;, s2f);&#xA;ruleresult.registerObject(&quot;start&quot;, start);&#xA;ruleresult.registerObject(&quot;cond&quot;, cond);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;useCase&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUseCase()) &amp;&amp; match.getObject(&quot;flow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getBasicFlow()) &amp;&amp; match.getObject(&quot;cond&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUCCondition());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, csp);&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw2ps&quot;,pgw2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;pgw2ps&quot;, pgw2ps);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;pstep&quot;, pstep);&#xA;match.registerObject(&quot;pflow&quot;, pflow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw2ps&quot;,pgw2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pflow&quot;,pflow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;pgw2ps&quot;, pgw2ps);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;pflow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelFlow()) &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, csp);&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2f&quot;,pn2f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2f&quot;, pn2f);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;state&quot;, state);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;inFlow&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getEndEvent());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;state&quot;, state);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2f&quot;,pn2f);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;state&quot;,state);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;pn2f&quot;, pn2f);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;ruleresult.registerObject(&quot;state&quot;, state);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;state&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUCCondition());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, csp);&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw2ps&quot;,pgw2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;pgw2ps&quot;, pgw2ps);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;pstep&quot;, pstep);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;pflow&quot;, pflow);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw2ps&quot;,pgw2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pflow&quot;,pflow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;pgw2ps&quot;, pgw2ps);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep()) &amp;&amp; match.getObject(&quot;pflow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelFlow());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, csp);&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;lastStep&quot;,lastStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2s&quot;,pn2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;state&quot;, state);&#xA;ruleresult.registerObject(&quot;lastStep&quot;, lastStep);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pn2s&quot;, pn2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;inFlow&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getEndEvent());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;state&quot;, state);&#xA;match.registerObject(&quot;lastStep&quot;, lastStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;state&quot;,state);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lastStep&quot;,lastStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2s&quot;,pn2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;state&quot;, state);&#xA;ruleresult.registerObject(&quot;lastStep&quot;, lastStep);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pn2s&quot;, pn2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;state&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUCCondition());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;gw&quot;, gw);&#xA;match.registerObject(&quot;gcw&quot;, gcw);&#xA;match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;gwStep&quot;, gwStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2ps&quot;,pn2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;pn2ps&quot;, pn2ps);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getChoiceStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pnToFlow&quot;,pnToFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;pnToFlow&quot;, pnToFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getChoiceStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, csp);&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg2ps&quot;,pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;pg2ps&quot;, pg2ps);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;pstep&quot;, pstep);&#xA;match.registerObject(&quot;pflow&quot;, pflow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow.id&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pstep&quot;,pstep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pg2ps&quot;,pg2ps);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pflow&quot;,pflow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pstep&quot;, pstep);&#xA;ruleresult.registerObject(&quot;pg2ps&quot;, pg2ps);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pflow&quot;, pflow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;pflow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelFlow()) &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getChoiceStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;cStep&quot;, cStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, csp);&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cStep&quot;, cStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, csp);&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep()) &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getAlternativeFlow()) &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getStepAlternative());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;gw&quot;, gw);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;gcw&quot;, gcw);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;gwStep&quot;, gwStep);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;gw&quot;, gw);&#xA;match.registerObject(&quot;gcw&quot;, gcw);&#xA;match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;gwStep&quot;, gwStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;gw&quot;, gw);&#xA;match.registerObject(&quot;gcw&quot;, gcw);&#xA;match.registerObject(&quot;node&quot;, node);&#xA;match.registerObject(&quot;sf&quot;, sf);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf&quot;,sf);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;gwStep&quot;, gwStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gwStep&quot;,gwStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw&quot;,gw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gcw&quot;,gcw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;node&quot;,node);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;n2s&quot;,n2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;gw2gs&quot;,gw2gs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;gwStep&quot;, gwStep);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;gw&quot;, gw);&#xA;ruleresult.registerObject(&quot;gcw&quot;, gcw);&#xA;ruleresult.registerObject(&quot;node&quot;, node);&#xA;ruleresult.registerObject(&quot;sf&quot;, sf);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;n2s&quot;, n2s);&#xA;ruleresult.registerObject(&quot;gw2gs&quot;, gw2gs);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;cStep&quot;, cStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, csp);&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;cStep&quot;, cStep);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, csp);&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getStepAlternative()) &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getAlternativeFlow()) &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getParallelStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevStep&quot;, prevStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevStep&quot;,prevStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;prevStep&quot;, prevStep);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getChoiceStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, csp);&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, csp);&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;alt&quot;, alt);&#xA;match.registerObject(&quot;useCase&quot;, useCase);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;cStep&quot;, cStep);&#xA;match.registerObject(&quot;altFlow&quot;, altFlow);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt.condition&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xD;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow.id&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.conditionExpression&quot;, csp);&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xD;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1.id&quot;, csp);&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;Eq eq_0 = new Eq();&#xD;&#xA;Eq eq_1 = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;csp.getConstraints().add(eq_0);&#xD;&#xA;csp.getConstraints().add(eq_1);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;eq_0.setRuleName(&quot;&quot;);&#xD;&#xA;eq_0.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;eq_1.setRuleName(&quot;&quot;);&#xD;&#xA;eq_1.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;alt&quot;,alt);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;useCase&quot;,useCase);&#xD;&#xA;isApplicableMatch.registerObject(&quot;p2uc&quot;,p2uc);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;cStep&quot;,cStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;eg2cs&quot;,eg2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;altFlow&quot;,altFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;alt&quot;, alt);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;useCase&quot;, useCase);&#xA;ruleresult.registerObject(&quot;p2uc&quot;, p2uc);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;cStep&quot;, cStep);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;eg2cs&quot;, eg2cs);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;altFlow&quot;, altFlow);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;alt&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getStepAlternative()) &amp;&amp; match.getObject(&quot;altFlow&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getAlternativeFlow()) &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getChoiceStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;inFlow&quot;, inFlow);&#xA;match.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, csp);&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lastStep&quot;,lastStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2s&quot;,pn2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;inFlow&quot;,inFlow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;event&quot;,event);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;state&quot;, state);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;lastStep&quot;, lastStep);&#xA;ruleresult.registerObject(&quot;pn2s&quot;, pn2s);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;inFlow&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;event&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getEndEvent());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;state&quot;, state);&#xA;match.registerObject(&quot;lastStep&quot;, lastStep);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state.name&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event.id&quot;, csp);&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_event_id,var_state_name);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;state&quot;,state);&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;lastStep&quot;,lastStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2s&quot;,pn2s);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;state&quot;, state);&#xA;ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;lastStep&quot;, lastStep);&#xA;ruleresult.registerObject(&quot;pn2s&quot;, pn2s);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;inFlow&quot;, inFlow);&#xA;ruleresult.registerObject(&quot;event&quot;, event);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;state&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getUCCondition());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;task&quot;,task);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;task&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getTask());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task.id&quot;, csp);&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_task_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;t2s&quot;, t2s);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;task&quot;, task);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;pgw&quot;, pgw);&#xA;match.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pgw&quot;,pgw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pcgw&quot;,pcgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;pgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway()) &amp;&amp; match.getObject(&quot;pcgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getParallelGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw.id&quot;, csp);&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;pgw&quot;, pgw);&#xA;ruleresult.registerObject(&quot;pcgwToStep&quot;, pcgwToStep);&#xA;ruleresult.registerObject(&quot;pgwToStep&quot;, pgwToStep);&#xA;ruleresult.registerObject(&quot;pcgw&quot;, pcgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isAppropriate_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;prevNode&quot;, prevNode);&#xA;match.registerObject(&quot;process&quot;, process);&#xA;match.registerObject(&quot;sf1&quot;, sf1);&#xA;match.registerObject(&quot;egw&quot;, egw);&#xA;match.registerObject(&quot;ecgw&quot;, ecgw);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/registerObjectsToMatch_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isAppropriate_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, csp);&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;isApplicableMatch.registerObject(&quot;sf1&quot;,sf1);&#xD;&#xA;isApplicableMatch.registerObject(&quot;egw&quot;,egw);&#xD;&#xA;isApplicableMatch.registerObject(&quot;ecgw&quot;,ecgw);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isApplicable_solveCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isApplicable_checkCsp_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/registerObjects_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;sf1&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getSequenceFlow()) &amp;&amp; match.getObject(&quot;egw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway()) &amp;&amp; match.getObject(&quot;ecgw&quot;).eClass().equals(SimpleBPMN.SimpleBPMNPackage.eINSTANCE.getExclusiveGateway());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/checkTypes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isAppropriate_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="match.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;match.registerObject(&quot;step&quot;, step);&#xA;match.registerObject(&quot;flow&quot;, flow);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/registerObjectsToMatch_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isAppropriate_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="// Create CSP&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xD;&#xA;isApplicableMatch.getAttributeInfo().add(csp);&#xD;&#xA;&#xD;&#xA;// Create literals&#xD;&#xA;&#xD;&#xA;// Create attribute variables&#xD;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step.id&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create unbound variables&#xD;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw.id&quot;, csp);&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xD;&#xA;&#xD;&#xA;// Create constraints&#xD;&#xA;Eq eq = new Eq();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;csp.getConstraints().add(eq);&#xD;&#xA;&#xD;&#xA;// Solve CSP&#xD;&#xA;eq.setRuleName(&quot;&quot;);&#xD;&#xA;eq.solve(var_egw_id,var_step_id);&#xD;&#xA;&#xD;&#xA;// Snapshot pattern match on which CSP is solved&#xD;&#xA;isApplicableMatch.registerObject(&quot;prevNode&quot;,prevNode);&#xD;&#xA;isApplicableMatch.registerObject(&quot;choiceStep&quot;,choiceStep);&#xD;&#xA;isApplicableMatch.registerObject(&quot;pn2cs&quot;,pn2cs);&#xD;&#xA;isApplicableMatch.registerObject(&quot;step&quot;,step);&#xD;&#xA;isApplicableMatch.registerObject(&quot;flow&quot;,flow);&#xD;&#xA;isApplicableMatch.registerObject(&quot;process&quot;,process);&#xD;&#xA;return csp;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isApplicable_solveCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return csp.check();">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/isApplicable_checkCsp_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="ruleresult.registerObject(&quot;prevNode&quot;, prevNode);&#xA;ruleresult.registerObject(&quot;choiceStep&quot;, choiceStep);&#xA;ruleresult.registerObject(&quot;pn2cs&quot;, pn2cs);&#xA;ruleresult.registerObject(&quot;step&quot;, step);&#xA;ruleresult.registerObject(&quot;flow&quot;, flow);&#xA;ruleresult.registerObject(&quot;process&quot;, process);&#xA;ruleresult.registerObject(&quot;sf1&quot;, sf1);&#xA;ruleresult.registerObject(&quot;egw&quot;, egw);&#xA;ruleresult.registerObject(&quot;egwToStep&quot;, egwToStep);&#xA;ruleresult.registerObject(&quot;ecgw&quot;, ecgw);&#xA;ruleresult.registerObject(&quot;ecgwToStep&quot;, ecgwToStep);&#xA;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/registerObjects_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="return true &amp;&amp; match.getObject(&quot;step&quot;).eClass().equals(SimpleUseCase.SimpleUseCasePackage.eINSTANCE.getNormalStep());">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/checkTypes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Process2UseCase&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC _p2uc = (bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForS2f = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;s2f&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F s2f = (bpmn2UseCase.FN2F) matchForS2f.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStart = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;start&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent start = (SimpleBPMN.StartEvent) matchForStart.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCond = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cond&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition cond = (SimpleUseCase.UCCondition) matchForCond.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_start_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;start&quot;, true, csp);&#xD;&#xA;var_start_id.setValue(start.getId());&#xD;&#xA;var_start_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cond&quot;, true, csp);&#xD;&#xA;var_cond_name.setValue(cond.getName());&#xD;&#xA;var_cond_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process&quot;, true, csp);&#xD;&#xA;var_process_id.setValue(process.getId());&#xD;&#xA;var_process_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_useCase_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase&quot;, true, csp);&#xD;&#xA;var_useCase_id.setValue(useCase.getId());&#xD;&#xA;var_useCase_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;Process2UseCase&quot;);&#xD;&#xA;eq0.solve(var_start_id,var_cond_name);&#xA;&#xA;eq1.setRuleName(&quot;Process2UseCase&quot;);&#xD;&#xA;eq1.solve(var_process_id,var_useCase_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_cond_name.setBound(false);&#xD;&#xA;&#x9;var_useCase_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_start_id,var_cond_name);&#xD;&#xA;&#x9;eq1.solve(var_process_id,var_useCase_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;cond.setName((String) var_cond_name.getValue());&#xD;&#xA;&#x9;&#x9;useCase.setId((String) var_useCase_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Process2UseCase&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchFor_p2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;_p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC _p2uc = (bpmn2UseCase.P2UC) matchFor_p2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.BasicFlow flow = (SimpleUseCase.BasicFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForS2f = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;s2f&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F s2f = (bpmn2UseCase.FN2F) matchForS2f.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStart = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;start&quot;)).findAny();&#xD;&#xA;SimpleBPMN.StartEvent start = (SimpleBPMN.StartEvent) matchForStart.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCond = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cond&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition cond = (SimpleUseCase.UCCondition) matchForCond.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_start_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;start&quot;, true, csp);&#xD;&#xA;var_start_id.setValue(start.getId());&#xD;&#xA;var_start_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_cond_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;cond&quot;, true, csp);&#xD;&#xA;var_cond_name.setValue(cond.getName());&#xD;&#xA;var_cond_name.setType(&quot;String&quot;);&#xA;&#xA;Variable var_process_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;process&quot;, true, csp);&#xD;&#xA;var_process_id.setValue(process.getId());&#xD;&#xA;var_process_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_useCase_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;useCase&quot;, true, csp);&#xD;&#xA;var_useCase_id.setValue(useCase.getId());&#xD;&#xA;var_useCase_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;Process2UseCase&quot;);&#xD;&#xA;eq0.solve(var_start_id,var_cond_name);&#xA;&#xA;eq1.setRuleName(&quot;Process2UseCase&quot;);&#xD;&#xA;eq1.solve(var_process_id,var_useCase_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_start_id.setBound(false);&#xD;&#xA;&#x9;var_process_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_start_id,var_cond_name);&#xD;&#xA;&#x9;eq1.solve(var_process_id,var_useCase_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;start.setId((String) var_start_id.getValue());&#xD;&#xA;&#x9;&#x9;process.setId((String) var_process_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgw2ps = (bpmn2UseCase.GW2S) matchForPgw2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;SplitAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pflow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pflow.setId((String) var_pflow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgw2ps = (bpmn2UseCase.GW2S) matchForPgw2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;SplitAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepSeq&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepSeq&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepFirst&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepFirst&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitSeq&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitSeq&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitFirst&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitFirst&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2f = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2f&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pn2f = (bpmn2UseCase.FN2F) matchForPn2f.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationFirst&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_state_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;state.setName((String) var_state_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2f = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2f&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pn2f = (bpmn2UseCase.FN2F) matchForPn2f.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationFirst&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_event_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;event.setId((String) var_event_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgw2ps = (bpmn2UseCase.GW2S) matchForPgw2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;Task2StepAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pflow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pflow.setId((String) var_pflow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgw2ps = (bpmn2UseCase.GW2S) matchForPgw2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;Task2StepAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForLastStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;lastStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step lastStep = (SimpleUseCase.Step) matchForLastStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2s = (bpmn2UseCase.FN2S) matchForPn2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationSeq&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_state_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;state.setName((String) var_state_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForLastStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;lastStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step lastStep = (SimpleUseCase.Step) matchForLastStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2s = (bpmn2UseCase.FN2S) matchForPn2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationSeq&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_event_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;event.setId((String) var_event_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInPFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep gwStep = (SimpleUseCase.ParallelStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow flow = (SimpleUseCase.ParallelFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInPFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep gwStep = (SimpleUseCase.ParallelStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow flow = (SimpleUseCase.ParallelFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceSeq&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceSeq&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pn2ps = (bpmn2UseCase.FN2S) matchForPn2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceSeq&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceFirst&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceFirst&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode prevNode = (SimpleBPMN.FlowNode) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPnToFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pnToFlow&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2F pnToFlow = (bpmn2UseCase.FN2F) matchForPnToFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceFirst&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPg2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pg2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pg2ps = (bpmn2UseCase.GW2S) matchForPg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;ChoiceAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pflow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pflow.setId((String) var_pflow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterSplit&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway prevNode = (SimpleBPMN.ParallelGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPstep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pstep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep pstep = (SimpleUseCase.ParallelStep) matchForPstep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPg2ps = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pg2ps&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pg2ps = (bpmn2UseCase.GW2S) matchForPg2ps.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPflow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pflow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelFlow pflow = (SimpleUseCase.ParallelFlow) matchForPflow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pflow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pflow&quot;, true, csp);&#xD;&#xA;var_pflow_id.setValue(pflow.getId());&#xD;&#xA;var_pflow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterSplit&quot;);&#xD;&#xA;eq0.solve(var_sf1_id,var_pflow_id);&#xA;&#xA;eq1.setRuleName(&quot;ChoiceAfterSplit&quot;);&#xD;&#xA;eq1.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_id,var_pflow_id);&#xD;&#xA;&#x9;eq1.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_alt_condition.setBound(false);&#xD;&#xA;&#x9;var_altFlow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;alt.setCondition((String) var_alt_condition.getValue());&#xD;&#xA;&#x9;&#x9;altFlow.setId((String) var_altFlow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;Task2StepAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_conditionExpression.setBound(false);&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setConditionExpression((String) var_sf1_conditionExpression.getValue());&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;EmptyDefaulFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway gw = (SimpleBPMN.ExclusiveGateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway gcw = (SimpleBPMN.ExclusiveGateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;EmptyDefaulFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway gw = (SimpleBPMN.ExclusiveGateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway gcw = (SimpleBPMN.ExclusiveGateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInDefaultFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInDefaultFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step prevStep = (SimpleUseCase.Step) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInAltFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow flow = (SimpleUseCase.AlternativeFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;LastStepInAltFlow&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGwStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gwStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep gwStep = (SimpleUseCase.ChoiceStep) matchForGwStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow flow = (SimpleUseCase.AlternativeFlow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gw = (SimpleBPMN.Gateway) matchForGw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGcw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gcw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Gateway gcw = (SimpleBPMN.Gateway) matchForGcw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;node&quot;)).findAny();&#xD;&#xA;SimpleBPMN.FlowNode node = (SimpleBPMN.FlowNode) matchForNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf = (SimpleBPMN.SequenceFlow) matchForSf.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Step step = (SimpleUseCase.Step) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForN2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;n2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S n2s = (bpmn2UseCase.FN2S) matchForN2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForGw2gs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;gw2gs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S gw2gs = (bpmn2UseCase.GW2S) matchForGw2gs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(gcw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_alt_condition.setBound(false);&#xD;&#xA;&#x9;var_altFlow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;alt.setCondition((String) var_alt_condition.getValue());&#xD;&#xA;&#x9;&#x9;altFlow.setId((String) var_altFlow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ParallelStep step = (SimpleUseCase.ParallelStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;SplitAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_conditionExpression.setBound(false);&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setConditionExpression((String) var_sf1_conditionExpression.getValue());&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep prevStep = (SimpleUseCase.ChoiceStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterChoiceDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep prevStep = (SimpleUseCase.ChoiceStep) matchForPrevStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterChoiceDef&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_alt_condition.setBound(false);&#xD;&#xA;&#x9;var_altFlow_id.setBound(false);&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;alt.setCondition((String) var_alt_condition.getValue());&#xD;&#xA;&#x9;&#x9;altFlow.setId((String) var_altFlow_id.getValue());&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterChoice&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAlt = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;alt&quot;)).findAny();&#xD;&#xA;SimpleUseCase.StepAlternative alt = (SimpleUseCase.StepAlternative) matchForAlt.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForUseCase = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;useCase&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UseCase useCase = (SimpleUseCase.UseCase) matchForUseCase.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForP2uc = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;p2uc&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.P2UC p2uc = (bpmn2UseCase.P2UC) matchForP2uc.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForCStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;cStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep cStep = (SimpleUseCase.ChoiceStep) matchForCStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEg2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;eg2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S eg2cs = (bpmn2UseCase.GW2S) matchForEg2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForAltFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;altFlow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.AlternativeFlow altFlow = (SimpleUseCase.AlternativeFlow) matchForAltFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep step = (SimpleUseCase.ChoiceStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_sf1_conditionExpression = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_conditionExpression.setValue(sf1.getConditionExpression());&#xD;&#xA;var_sf1_conditionExpression.setType(&quot;String&quot;);&#xA;&#xA;Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(&quot;alt&quot;, true, csp);&#xD;&#xA;var_alt_condition.setValue(alt.getCondition());&#xD;&#xA;var_alt_condition.setType(&quot;String&quot;);&#xA;&#xA;Variable var_sf1_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;sf1&quot;, true, csp);&#xD;&#xA;var_sf1_id.setValue(sf1.getId());&#xD;&#xA;var_sf1_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_altFlow_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;altFlow&quot;, true, csp);&#xD;&#xA;var_altFlow_id.setValue(altFlow.getId());&#xD;&#xA;var_altFlow_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;Eq eq1 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq1);&#xA;&#xA;Eq eq2 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq2);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xA;&#xA;eq1.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq1.solve(var_sf1_id,var_altFlow_id);&#xA;&#xA;eq2.setRuleName(&quot;ChoiceAfterChoice&quot;);&#xD;&#xA;eq2.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_sf1_conditionExpression.setBound(false);&#xD;&#xA;&#x9;var_sf1_id.setBound(false);&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_sf1_conditionExpression,var_alt_condition);&#xD;&#xA;&#x9;eq1.solve(var_sf1_id,var_altFlow_id);&#xD;&#xA;&#x9;eq2.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;sf1.setConditionExpression((String) var_sf1_conditionExpression.getValue());&#xD;&#xA;&#x9;&#x9;sf1.setId((String) var_sf1_id.getValue());&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForLastStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;lastStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep lastStep = (SimpleUseCase.ChoiceStep) matchForLastStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2s = (bpmn2UseCase.GW2S) matchForPn2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_state_name.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;state.setName((String) var_state_name.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;TerminationAfterMerge&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForState = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;state&quot;)).findAny();&#xD;&#xA;SimpleUseCase.UCCondition state = (SimpleUseCase.UCCondition) matchForState.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForLastStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;lastStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep lastStep = (SimpleUseCase.ChoiceStep) matchForLastStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2s = (bpmn2UseCase.GW2S) matchForPn2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForInFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;inFlow&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow inFlow = (SimpleBPMN.SequenceFlow) matchForInFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEvent = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;event&quot;)).findAny();&#xD;&#xA;SimpleBPMN.EndEvent event = (SimpleBPMN.EndEvent) matchForEvent.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_event_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;event&quot;, true, csp);&#xD;&#xA;var_event_id.setValue(event.getId());&#xD;&#xA;var_event_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_state_name = CSPFactoryHelper.eINSTANCE.createVariable(&quot;state&quot;, true, csp);&#xD;&#xA;var_state_name.setValue(state.getName());&#xD;&#xA;var_state_name.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;TerminationAfterMerge&quot;);&#xD;&#xA;eq0.solve(var_event_id,var_state_name);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_event_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_event_id,var_state_name);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;event.setId((String) var_event_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;Task2StepAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForT2s = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;t2s&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S t2s = (bpmn2UseCase.FN2S) matchForT2s.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForTask = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;task&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Task task = (SimpleBPMN.Task) matchForTask.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_task_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;task&quot;, true, csp);&#xD;&#xA;var_task_id.setValue(task.getId());&#xD;&#xA;var_task_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;Task2StepAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_task_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_task_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_task_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;task.setId((String) var_task_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;SplitAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pgw = (SimpleBPMN.ParallelGateway) matchForPgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.FN2S pcgwToStep = (bpmn2UseCase.FN2S) matchForPcgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pgwToStep = (bpmn2UseCase.GW2S) matchForPgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pcgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ParallelGateway pcgw = (SimpleBPMN.ParallelGateway) matchForPcgw.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pgw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(pcgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_pgw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;pgw&quot;, true, csp);&#xD;&#xA;var_pgw_id.setValue(pgw.getId());&#xD;&#xA;var_pgw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;SplitAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_pgw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_pgw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_pgw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;pgw.setId((String) var_pgw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_step_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;step.setId((String) var_step_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/checkAttributes_FWD"/>
  </compilerInjectionEntries>
  <compilerInjectionEntries content="AttributeConstraintsRuleResult ruleResult = TGGRuntimeFactory.eINSTANCE.createAttributeConstraintsRuleResult();&#xD;&#xA;ruleResult.setRule(&quot;ChoiceAfterEmptyDef&quot;);&#x9;&#xD;&#xA;ruleResult.setSuccess(true);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;CSP csp = CspFactory.eINSTANCE.createCSP();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPrevNode = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;prevNode&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway prevNode = (SimpleBPMN.ExclusiveGateway) matchForPrevNode.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForChoiceStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;choiceStep&quot;)).findAny();&#xD;&#xA;SimpleUseCase.ChoiceStep choiceStep = (SimpleUseCase.ChoiceStep) matchForChoiceStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForPn2cs = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;pn2cs&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S pn2cs = (bpmn2UseCase.GW2S) matchForPn2cs.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;step&quot;)).findAny();&#xD;&#xA;SimpleUseCase.NormalStep step = (SimpleUseCase.NormalStep) matchForStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForFlow = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;flow&quot;)).findAny();&#xD;&#xA;SimpleUseCase.Flow flow = (SimpleUseCase.Flow) matchForFlow.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForProcess = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;process&quot;)).findAny();&#xD;&#xA;SimpleBPMN.Process process = (SimpleBPMN.Process) matchForProcess.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForSf1 = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;sf1&quot;)).findAny();&#xD;&#xA;SimpleBPMN.SequenceFlow sf1 = (SimpleBPMN.SequenceFlow) matchForSf1.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway egw = (SimpleBPMN.ExclusiveGateway) matchForEgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;egwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S egwToStep = (bpmn2UseCase.GW2S) matchForEgwToStep.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgw = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgw&quot;)).findAny();&#xD;&#xA;SimpleBPMN.ExclusiveGateway ecgw = (SimpleBPMN.ExclusiveGateway) matchForEcgw.get().getNode();&#xA;&#xA;Optional&lt;TripleMatchNodeMapping> matchForEcgwToStep = __tripleMatch.getNodeMappings().stream().filter(nm -> nm.getNodeName().equals(&quot;ecgwToStep&quot;)).findAny();&#xD;&#xA;bpmn2UseCase.GW2S ecgwToStep = (bpmn2UseCase.GW2S) matchForEcgwToStep.get().getNode();&#xA;&#xA;if(!(prevNode.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(egw.isIsDiverging() == true)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;if(!(ecgw.isIsDiverging() == false)){ &#xD;&#xA;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;return ruleResult;&#xD;&#xA;}&#x9;&#xA;&#xA;&#xA;&#xA;Variable var_egw_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;egw&quot;, true, csp);&#xD;&#xA;var_egw_id.setValue(egw.getId());&#xD;&#xA;var_egw_id.setType(&quot;String&quot;);&#xA;&#xA;Variable var_step_id = CSPFactoryHelper.eINSTANCE.createVariable(&quot;step&quot;, true, csp);&#xD;&#xA;var_step_id.setValue(step.getId());&#xD;&#xA;var_step_id.setType(&quot;String&quot;);&#xA;&#xA;Eq eq0 = new Eq();&#xD;&#xA;csp.getConstraints().add(eq0);&#xA;&#xA;eq0.setRuleName(&quot;ChoiceAfterEmptyDef&quot;);&#xD;&#xA;eq0.solve(var_egw_id,var_step_id);&#xA;&#xA;if(csp.check()){ &#xD;&#xA;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;} else {&#xD;&#xA;&#x9;var_egw_id.setBound(false);&#xD;&#xA;&#x9;eq0.solve(var_egw_id,var_step_id);&#xD;&#xA;&#x9;if(csp.check()){ &#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(true);&#xD;&#xA;&#x9;&#x9;ruleResult.setRequiredChange(true);&#xD;&#xA;&#x9;&#x9;egw.setId((String) var_egw_id.getValue());&#xD;&#xA;&#x9;} else {&#xD;&#xA;&#x9;&#x9;ruleResult.setSuccess(false);&#xD;&#xA;&#x9;&#x9;return ruleResult;&#xD;&#xA;&#x9;}&#x9;&#x9;&#xD;&#xA;}&#x9;&#xA;&#xA;return ruleResult;">
    <eOperation href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef/checkAttributes_BWD"/>
  </compilerInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="org.moflon.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="csp.constraints.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGLanguage.csp.*">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Process2UseCase"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInPFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceSeq"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceFirst"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterSplit"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/EmptyDefaulFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInDefaultFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/LastStepInAltFlow"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoiceDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterChoice"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/TerminationAfterMerge"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/Task2StepAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/SplitAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="TGGRuntime.TripleMatchNodeMapping">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
  <importInjectionEntries content="java.util.Optional">
    <eClass href="platform:/plugin/bpmn2UseCase/model/Bpmn2UseCase.ecore#//Rules/ChoiceAfterEmptyDef"/>
  </importInjectionEntries>
</sdmUtil:CompilerInjection>
